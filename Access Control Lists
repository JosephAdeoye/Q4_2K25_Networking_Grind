Access Control Lists
- An ACL identifies traffic based on characteristics of the packet, such as source IP address, destination IP address, and port number
- The router or switch can take an action based on the result of the ACL
- ACLs are supported on both routers and switches.
- The original use of ACLs was as a security feature to decide if traffic should be allowed to pass through the router
- By default, a router will allow all traffic to pass between its interfaces
- When ACLs are applied, the router identifies traffic and then decides if it will be allowed or not
- ACLs are also used in other software policies when traffic has to be identified, for example:
  - Identify traffic to translate to a different IP address in a NAT (Network Address Translation Policy)
  - Identify traffic to give better service to in a QoS (Quality of Service) policy. E.g VoIP

ACE Access Control Entries
- Access Control Lists are made up of Access Control Entries, which are a series of permit or deny rules
- Each ACE is written in a separate line

# Access Control Entry (ACE) Example
The following ACE denies certain TCP traffic based on source and destination criteria:

----"R2(config)# access-list 100 deny tcp 10.10.30.0 0.0.0.255 gt 49151 10.10.20.1 0.0.0.0 eq 23"----


### Breakdown of the ACE

| **Field**       | **Value**         | **Explanation**                                                                 |
|------------------|------------------|---------------------------------------------------------------------------------|
| Access List No. | `100`            | Identifies the access list. Standard ACLs: 1‚Äì99, Extended ACLs: 100‚Äì199.        |
| Action          | `deny`           | Specifies that matching traffic will be blocked.                                |
| Protocol        | `tcp`            | This ACE applies only to TCP traffic.                                           |
| Source IP       | `10.10.30.0`     | The source network address.                                                     |
| Source Wildcard | `0.0.0.255`      | Wildcard mask (matches `10.10.30.0 ‚Äì 10.10.30.255`).                            |
| Source Port     | `gt 49151`       | Matches traffic from source ports greater than 49151.                           |
| Destination IP  | `10.10.20.1`     | Specific destination host address.                                              |
| Destination WC  | `0.0.0.0`        | Wildcard mask (matches exactly `10.10.20.1`).                                   |
| Destination Port| `eq 23`          | Matches Telnet traffic (port 23).                                               |

### What It Does
This ACE **blocks Telnet (TCP/23) traffic** destined for host `10.10.20.1` if it comes from any device in the `10.10.30.0/24` subnet, **but only if the source port number is greater than 49151**.

---

‚úÖ **Key takeaway:** Extended ACLs allow you to filter traffic with very fine control ‚Äî by protocol, source/destination addresses, and port numbers.

Original Implementation: Standard vs Extended ACLs
- Standard ACLs reference the source address only
- Extended ACLs provide finer control and checks based on the protocol, source address, destination address, and port number
- Standard ACL Range: 1 - 99
- Extended ACL Range: 100 - 199

ACL Improvement: Expanded Ranges
- Cisco expanded the original ACL Ranges
- Standard: 1 - 99, 1300 - 1999
- Extended: 100 - 199, 2000 - 2699

Standard Access List Example
- The default wildcard mask for a Standard ACL is 0.0.0.0, meaning an individual host address
  R1 (config)# access-list 1 deny 10.10.10.10
- Do not forget to enter the wildcard when specifying an IP subnet
  R1 (config)# access-list 1 deny 10.10.10.0
- There is no default wildcard mask for Extended ACLs

ACL Improvement: Named ACLs
- You can now reference ACLs by number or by name
- Named ACLs begin with the command 'ip access-list' instead of 'access-list'

# Access Control List (ACL) Syntax

ACLs in Cisco IOS follow a structured syntax. There are two main types: **Standard ACLs** and **Extended ACLs**.

## 1. Standard ACL Syntax
- **`<number>`** ‚Äì ACL number (1‚Äì99 for standard ACLs).  
- **`permit | deny`** ‚Äì Action to take.  
- **`<source>`** ‚Äì Source IP address.  
- **`<wildcard-mask>`** ‚Äì Wildcard mask to define range of addresses.  
**Example:**
access-list 10 deny 192.168.1.0 0.0.0.255

## 2. Extended ACL Syntax
- **`<number>`** ‚Äì ACL number (100‚Äì199 for extended ACLs).  
- **`<protocol>`** ‚Äì IP, TCP, UDP, ICMP, etc.  
- **`<source>` `<wildcard-mask>`** ‚Äì Source IP and range.  
- **`[operator port]`** ‚Äì Optional (eq, gt, lt, neq). Matches specific ports.  
- **`<destination>` `<wildcard-mask>`** ‚Äì Destination IP and range.  
- **`[operator port]`** ‚Äì Optional port for destination traffic.  
**Example:**
access-list 101 deny tcp 10.10.30.0 0.0.0.255 gt 49151 10.10.20.1 0.0.0.0 eq 23

## 3. Applying ACLs
ACLs must be applied to an interface and direction:
---
interface <type> <number>
ip access-group <acl-number> {in | out}
---
- **`in`** ‚Äì Packets entering the interface are filtered.  
- **`out`** ‚Äì Packets leaving the interface are filtered.  
**Example:**
interface GigabitEthernet0/0
ip access-group 101 in
üëâ Applies ACL 101 on incoming traffic.

--- 

‚úÖ **Key Notes:**
- ACLs are processed **top-down** (first match wins).  
- There is an **implicit deny all** at the end of every ACL.  
- Extended ACLs should be placed **close to the source**, while Standard ACLs should be placed **close to the destination**.

---
# ACL Operators Cheat Sheet

ACL operators allow filtering traffic based on **TCP/UDP port numbers**.

| Operator | Meaning                        | Example                    |
|----------|--------------------------------|----------------------------|
| `eq`     | Equal to (specific port)       | `eq 80` ‚Üí Match HTTP       |
| `neq`    | Not equal to                   | `neq 23` ‚Üí Match all ports except Telnet |
| `gt`     | Greater than                   | `gt 1023` ‚Üí Match ephemeral (high) ports |
| `lt`     | Less than                      | `lt 1024` ‚Üí Match well-known ports |
| `range`  | Inclusive range of ports       | `range 1000 2000` ‚Üí Match ports 1000‚Äì2000 |

---
## Examples
1. **Permit HTTP traffic to a web server:**
access-list 110 permit tcp any host 192.168.1.10 eq 80

2. **Deny Telnet traffic from 10.10.30.0/24 to 10.10.20.1:**
access-list 120 deny tcp 10.10.30.0 0.0.0.255 host 10.10.20.1 eq 23

3. **Permit traffic on all ports greater than 1023 (ephemeral ports):**
access-list 130 permit tcp any any gt 1023

---

‚úÖ **Tips:**
- Use `eq` for specific services (e.g., 80 = HTTP, 443 = HTTPS, 23 = Telnet, 22 = SSH).  
- Use `range` for multiple consecutive ports.  
- Remember the **implicit deny all** at the end of ACLs.

# Implicit Deny All in ACLs
Every Access Control List (ACL) in Cisco IOS has an **invisible rule at the end**:

This rule is **not shown** when you display the ACL, but it is **always there**.
---
## What It Means
- If a packet does **not match any permit/deny statement you configured**, it will automatically be **denied**.  
- This ensures that traffic is blocked unless you explicitly allow it.
---
## Example
access-list 10 permit 192.168.1.0 0.0.0.255
- ‚úÖ Permits traffic from `192.168.1.0/24`.  
- ‚ùå Any other traffic (e.g., `192.168.2.0/24`) does not match, so it is denied by the **implicit deny all**.  

Result: Only `192.168.1.0/24` traffic is allowed; everything else is denied ‚Äî even though you didn‚Äôt write "deny."
---
## Why Cisco Does This
- **Secure by default** ‚Üí traffic must be explicitly allowed.  
- **Prevents mistakes** ‚Üí no accidental access if you forget a rule.  
- **Forces clarity** ‚Üí you must decide exactly what traffic is permitted.  
---
‚úÖ **In short:**  
The **implicit deny all** is a hidden rule at the end of every ACL that blocks any packet not matching earlier rules.

# ACL Processing Flow

ACLs in Cisco IOS are processed **top to bottom**.  
The first match wins, and if no match is found, traffic is dropped by the **implicit deny all** at the end.
---

## Flow Diagram
        +------------------+
        |   Incoming Packet |
        +------------------+
                  |
                  v
    +-------------------------------+
    | Does it match 1st ACL entry?  |
    +-------------------------------+
      | Yes                  | No
      v                      v
+--------------------+ +----------------------------+
| Apply permit/deny | | Check next ACL statement |
+--------------------+ +----------------------------+
      |                            |
      v                            v
[Packet processed]      [Repeat until end of ACL]
                  |
                  v
       +----------------------------+
       | Implicit "deny ip any any" |
       +----------------------------+
                  |
                  v
           [Packet dropped]

---
## Key Points
- ACLs are **sequential**: the first match decides the fate of the packet.  
- If no rules match, the packet hits the **implicit deny all** and is dropped.  
- Always design ACLs carefully to ensure the intended traffic is permitted.  
‚úÖ **Tip:** Add a `permit ip any any` at the end if you want to override the implicit deny.


